#lang plai-typed

(require "first-class-funcs.mjmcdonald.rkt")

(test (run '(+ (* 5 (+ 7 3)) 4)) (numV 54))
(test (run '(if0 (+ 2 2) 6 8)) (numV 8))
(test (run '(with ((f (fun (x) (* x 2)))) (f 5))) (numV 10))
(test/exn (run '(with ((x 5)) y)) "unbound")
(test/exn (run '((fun (x y x) 3) 4 4 4)) "multiple")
(test/exn (run '(3 4)) "type") 
(test/exn (run '(if0 (fun (x) 5) 3 4)) "type")

(test (run '3) (numV 3)) ; test numbers are a valid program
(test (run '(- 7 4)) (numV 3)) ; test subtraction works
(test (run '(with ((x 6)) x)) (numV 6)) ; test basic with statement
(test (run '(fun (x) (+ x 3))) (closV (list 'x) (plusC (idC 'x) (numC 3)) mt-env)) ; test lambdas evaluate to closures
(test (run '((fun (x) (+ x 3)) 7)) (numV 10)) ; test functions can be applied anonymously
(test (run/env '(if0 (- 2 x) 6 8) (list (bind 'x (numV 2)))) (numV 6)) ; test if0 when true
(test (run '(with ((x 6)) (with ((y x)) y))) (numV 6)) ; test nested withs
(test (run '(((fun (x) (fun (x) (+ x 2))) 3) 4)) (numV 6)) ; test scoping
(test (run '(((fun (x) (fun (y) (+ x y))) 3) 4)) (numV 7)) ; test scoping

(test/exn (run '(with ((x 6) (y x)) y)) "unbound") ; test with behaves as 'let' NOT 'let*'
(test/exn (run '(+ (fun (x) 5) 4)) "type")
(test/exn (run '(* (fun (x) 3) 7)) "type")
(test/exn (run '(with ((x 4) (x 3)) x)) "multiple")
(test/exn (run '(fun (x x) (+ x 2))) "multiple")
(test/exn (run '((fun (x y) (+ x y)) 1 2 3)) "length")
(test/exn (run '((fun (x y z) (+ x y)) 1 2)) "length")
(test/exn (run '((fun (3) (+ 3 1)) 3)) "not a symbol")

(test (run '(with ((Y (fun (le) ((fun (f) (f f)) (fun (f) (le (fun (x) ((f f) x))))))))
              (with ((test (Y (fun (factorial) (fun (n) (if0 n 1 (* n (factorial (- n 1)))))))))
                    (test 5)))) (numV 120)) ; recursive factorial function with Y combinator - just for fun